{"version":3,"sources":["webparts/gsvrAnnouncements/GsvrAnnouncementsWebPart.ts"],"names":[],"mappings":"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","file":"webparts/gsvrAnnouncements/GsvrAnnouncementsWebPart.js","sourcesContent":["import { Version } from '@microsoft/sp-core-library';\r\nimport { sp, Items, ItemVersion, Web } from \"@pnp/sp\";\r\n\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField\r\n} from '@microsoft/sp-webpart-base';\r\n\r\nimport {\r\n  Environment,\r\n  EnvironmentType\r\n } from '@microsoft/sp-core-library';\r\n\r\n import {\r\n  SPHttpClient,\r\n  SPHttpClientResponse   \r\n } from '@microsoft/sp-http';\r\n\r\nimport { escape } from '@microsoft/sp-lodash-subset';\r\n\r\nimport styles from './GsvrAnnouncementsWebPart.module.scss';\r\nimport * as strings from 'GsvrAnnouncementsWebPartStrings';\r\n\r\nexport interface ISPLists {\r\n  value: ISPList[];\r\n }\r\n\r\n export interface ISPList {\r\n  Title: string; // this is the department name in the List\r\n  Id: string;\r\n  AnncURL:string;\r\n  DeptURL:string;\r\n  CalURL:string;\r\n  a85u:string; // this is the LINK URL\r\n }\r\n\r\n   //global vars\r\n   var userDept = \"\";\r\n\r\nexport interface IGsvrAnnouncementsWebPartProps {\r\n  description: string;\r\n}\r\n\r\nexport default class GsvrAnnouncementsWebPart extends BaseClientSideWebPart<IGsvrAnnouncementsWebPartProps> {\r\n  \r\n  // get all the user properties\r\n  getuser = new Promise((resolve,reject) => {\r\n    // SharePoint PnP Rest Call to get the User Profile Properties\r\n    return sp.profiles.myProperties.get().then(function(result) {\r\n      var props = result.UserProfileProperties;\r\n      var propValue = \"\";\r\n      var userDepartment = \"\";\r\n  \r\n      props.forEach(function(prop) {\r\n        //this call returns key/value pairs so we need to look for the Dept Key\r\n        if(prop.Key == \"Department\"){\r\n          // set our global var for the users Dept.\r\n          userDept += prop.Value;\r\n        }\r\n      });\r\n      return result;\r\n    }).then((result) =>{\r\n      this._getListData().then((response) =>{\r\n        this._renderList(response.value);\r\n      });\r\n    });\r\n  \r\n  });\r\n\r\n  public render(): void {\r\n    this.domElement.innerHTML = `\r\n      <div class=\"${ styles.gsvrAnnouncements }\">\r\n        <div class=\"${ styles.container }\">\r\n          <div class=\"${ styles.row }\">\r\n            <div class=\"${ styles.column }\">\r\n              <span class=\"${ styles.title }\">Welcome to SharePoint!</span>\r\n              <p class=\"${ styles.subTitle }\">Customize SharePoint experiences using Web Parts.</p>\r\n              <p class=\"${ styles.description }\">${escape(this.properties.description)}</p>\r\n              <a href=\"https://aka.ms/spfx\" class=\"${ styles.button }\">\r\n                <span class=\"${ styles.label }\">Learn more</span>\r\n              </a>\r\n\r\n              <h1>Department Annoucements</h1>\r\n            <h3><div id=\"deptAnnouce\"/></h3>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>`;\r\n  }\r\n\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  // main REST Call to the list...passing in the deaprtment into the call to \r\n  //return a single list item\r\n  public _getListData(): Promise<ISPLists> {  \r\n    return this.context.spHttpClient.get(`https://girlscoutsrv.sharepoint.com/_api/web/lists/GetByTitle('TeamDashboardSettings')/Items?$filter=Title eq '`+ userDept +`'`, SPHttpClient.configurations.v1)\r\n      .then((response: SPHttpClientResponse) => {\r\n        return response.json();\r\n      });\r\n   }\r\n\r\n   private _renderList(items: ISPList[]): void {\r\n    let html: string = '';\r\n    let libHTML: string ='';\r\n  \r\n    var siteURL = \"\";\r\n    //list name\r\n    var announcementsListName =  \"\";\r\n    // items in the list\r\n    var annoucementItems = \"\";\r\n    var date = new Date();\r\n    var strToday = \"\";\r\n    var mm = date.getMonth()+1;\r\n    console.log(mm);\r\n    \r\n    var dd = date.getDate();\r\n    console.log(dd);\r\n\r\n    var yyyy = date.getFullYear();\r\n    console.log(yyyy);\r\n\r\n    if(dd < 10){\r\n      dd = 0 + dd;\r\n      console.log(dd);\r\n    }\r\n\r\n    if(mm < 10){\r\n      mm = 0 + mm;\r\n      console.log(mm);\r\n    }\r\n\r\n    strToday = mm + \"/\" + dd + \"/\" + yyyy;\r\n    console.log(strToday);\r\n    \r\n    items.forEach((item: ISPList) => {\r\n      siteURL = item.DeptURL;\r\n      announcementsListName = item.AnncURL;\r\n    });\r\n    //1st we need to override the current web to go to the department sites web\r\n    const w = new Web(\"https://girlscoutsrv.sharepoint.com\" + siteURL);\r\n    \r\n    // then use PnP to query the list\r\n    w.lists.getByTitle(announcementsListName).items.filter(\"Expires ge '\" + strToday + \"'\").top(1)\r\n    .get()\r\n    .then((data) => {\r\n      console.log(data);\r\n\r\n      for (var x = 0; x < data.length; x++){\r\n        //console.log(data[x].URL);\r\n        //this gets the HTTP URL of the hyper link\r\n        console.log(data[x].Title);\r\n        //this gets body of the annoucement\r\n        console.log(data[x].Body);\r\n        //date it expires\r\n        console.log(data[x].Expires);\r\n\r\n        annoucementItems += data[x].Title + '\\r\\n';\r\n       // libHTML += `<p>${hrItems.toString()}</p>`;\r\n      }\r\n      document.getElementById(\"deptAnnouce\").innerText = annoucementItems;\r\n  }).catch(e => { console.error(e); });\r\n\r\n    const listContainer: Element = this.domElement.querySelector('#ListItems');\r\n    listContainer.innerHTML = html;\r\n  }\r\n\r\n  // this is required to use the SharePoint PnP shorthand REST CALLS\r\n  public onInit():Promise<void> {\r\n    return super.onInit().then (_=> {\r\n      sp.setup({\r\n        spfxContext:this.context\r\n      });\r\n    });\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('description', {\r\n                  label: strings.DescriptionFieldLabel\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}